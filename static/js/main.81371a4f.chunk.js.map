{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","props","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","InstructContract","networks","instance","Contract","abi","address","setState","contract","state","methods","getInstructor","call","instructor","fName","age","alert","error","setInstructor","handleSubmit","evt","preventDefault","send","from","myChangeHandler","event","nam","target","name","val","value","bind","this","className","id","onSubmit","type","placeholder","onChange","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qUAqCeA,EAnCC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAC,EAAA,0DAE1BF,OAAOG,SAFmB,wBAGtBC,EAAO,IAAIC,IAAKL,OAAOG,UAHD,kBAMpBH,OAAOG,SAASG,SANI,OAQ1BR,EAAQM,GARkB,gDAU1BL,EAAO,EAAD,IAVoB,gCAcrBC,OAAOI,MAERA,EAAOJ,OAAOI,KACpBG,QAAQC,IAAI,2BACZV,EAAQM,KAIFK,EAAW,IAAIJ,IAAKK,UAAUC,aAClC,yBAEIP,EAAO,IAAIC,IAAKI,GACtBF,QAAQC,IAAI,gDACZV,EAAQM,IA3BoB,8DC0GrBQ,G,kBAnEf,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KApCNC,kBAmCiB,sBAnCG,sCAAAZ,EAAA,+EAGGN,IAHH,cAGVQ,EAHU,gBAMOA,EAAKW,IAAIC,cANhB,cAMVC,EANU,gBASQb,EAAKW,IAAIG,IAAIC,QATrB,cASVC,EATU,OAUVC,EAAkBC,EAAiBC,SAASH,GAC5CI,EAAW,IAAIpB,EAAKW,IAAIU,SAC5BH,EAAiBI,IACjBL,GAAmBA,EAAgBM,SAKrC,EAAKC,SAAS,CAAExB,OAAMa,WAAUY,SAAUL,IAlB1B,UAoBS,EAAKM,MAAMD,SAASE,QAAQC,gBAAgBC,OApBrD,QAoBVC,EApBU,OAqBhB,EAAKN,SAAS,CAACO,MAAQD,EAAW,GAAIE,IAAIF,EAAW,KArBrC,kDAyBhBG,MAAM,0EAGN9B,QAAQ+B,MAAR,MA5BgB,0DAmCH,EAHjBC,cAGiB,sBAHD,sBAAArC,EAAA,0FAGC,EAWnBsC,aAXmB,uCAWJ,WAAQC,GAAR,SAAAvC,EAAA,6DACbuC,EAAIC,iBADS,SAEP,EAAKZ,MAAMD,SAASE,QAAQQ,cAAc,EAAKT,MAAMK,MAAM,EAAKL,MAAMM,KAAKO,KAAK,CAACC,KAAM,EAAKd,MAAMb,SAAS,KAFpG,2CAXI,wDAiBnB4B,gBAAkB,SAACC,GACjB,IAAIC,EAAMD,EAAME,OAAOC,KACnBC,EAAMJ,EAAME,OAAOG,MACvB,EAAKvB,SAAL,eAAgBmB,EAAMG,KAlBtB,EAAKpB,MAAQ,CAAE1B,KAAM,KACnBa,SAAU,KACTY,SAAU,KACXM,MAAO,KACPC,IAAM,MAER,EAAKI,aAAe,EAAKA,aAAaY,KAAlB,gBARH,E,sEAwBf,OAAKC,KAAKvB,MAAM1B,KAId,yBAAKkD,UAAU,OACb,yBAAKA,UAAU,aAEf,gDAEA,wBAAIC,GAAG,cAAcF,KAAKvB,MAAMK,MAAhC,UAA8CkB,KAAKvB,MAAMM,IAAzD,MACA,0BAAMoB,SAAUH,KAAKb,cACrB,2BAAQc,UAAU,0BAAlB,mBACA,2BAAOC,GAAG,QAAQN,KAAK,QAAQQ,KAAK,OAAQC,YAAY,OACxDC,SAAUN,KAAKR,kBASf,2BAAOS,UAAU,0BAAjB,kBACA,2BAAOC,GAAG,MAAMN,KAAK,MAAMQ,KAAK,OAAQC,YAAY,MACnDC,SAAUN,KAAKR,kBAShB,4BAAQU,GAAG,SAASJ,MAAM,SAAUM,KAAK,UAAzC,wBAhCK,4E,GA/DKG,cCMEC,QACW,cAA7B7D,OAAO8D,SAASC,UAEe,UAA7B/D,OAAO8D,SAASC,UAEhB/D,OAAO8D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.81371a4f.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport InstructContract from \"./contracts/Instruct.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = InstructContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        InstructContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n        \n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance });\n\n      const instructor = await this.state.contract.methods.getInstructor().call();\n      this.setState({fName : instructor[0], age:instructor[1]})\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  setInstructor = async () => {\n\n  };\nconstructor(props) {\n  super(props)\n  this.state = { web3: null,\n    accounts: null,\n     contract: null,\n    fName: null,\n    age:  null\n  };\n  this.handleSubmit = this.handleSubmit.bind(this);\n}\n\nhandleSubmit = async  (evt) => {\n  evt.preventDefault();\n  await this.state.contract.methods.setInstructor(this.state.fName,this.state.age).send({from: this.state.accounts[0]})\n\n}\n\nmyChangeHandler = (event) => {\n  let nam = event.target.name\n  let val = event.target.value\n  this.setState({[nam]: val} )\n}\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n\n        <h1>Class Instructor</h1>\n\n        <h2 id=\"instructor\">{this.state.fName} ( age {this.state.age} )</h2>\n        <form onSubmit={this.handleSubmit}>\n        <label  className=\"col-lg-2 control-label\">Instructor Name</label>\n        <input id=\"fName\" name=\"fName\" type=\"text\"  placeholder=\"Name\"\n        onChange={this.myChangeHandler}\n/*         onChange={(event) => {\n          let newName = this.input.value\n           this.setState({fName:newName})}\n         }\n         ref={(input) => { this.input = input }}\n          */\n         />\n\n        <label className=\"col-lg-2 control-label\" >Instructor Age</label>\n        <input id=\"age\" name=\"age\" type=\"text\"  placeholder=\"age\"\n         onChange={this.myChangeHandler}\n         /*  onChange={(event) => {\n            let newAge = this.input.value\n            this.setState({age:newAge})\n          }}\n          ref={(input) => { this.input = input }} */\n        \n        />\n\n        <button id=\"button\" value=\"submit\"  type=\"submit\">Update Instructor</button>\n        </form>\n\n\n         </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}